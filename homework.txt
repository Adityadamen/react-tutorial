import React, { useEffect, useState } from 'react';
import RestaurantCard from './RestaurantCard';
import Shimmer from './Shimmer';

const Body = () => {
  const [listOfRestaurant, setListOfRestaurant] = useState([]);
  const [filteredRestaurant, setFilteredRestaurant] = useState([]);
  const [searchText, setSearchText] = useState('');
  const [page, setPage] = useState(1);
  const [loading, setLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);

  const fetchInitialData = async () => {
    setLoading(true);
    try {
      const response = await fetch(
        'https://corsproxy.io/?https://www.swiggy.com/dapi/restaurants/list/v5?lat=12.9715987&lng=77.5945627&is-seo-homepage-enabled=true&page_type=DESKTOP_WEB_LISTING'
      );
      const json = await response.json();
      const initialRestaurants = json?.data?.cards[1]?.card?.card?.gridElements?.infoWithStyle?.restaurants || [];
      setListOfRestaurant(initialRestaurants);
      setFilteredRestaurant(initialRestaurants);
    } catch (error) {
      console.error('Error fetching initial data:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchMoreData = async () => {
    if (loading || !hasMore) return;
    setLoading(true);
    try {
      const response = await fetch('https://corsproxy.io/?https://www.swiggy.com/dapi/restaurants/list/update', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          lat: 12.9715987,
          lng: 77.5945627,
          is_seo_homepage_enabled: true,
          page_type: 'DESKTOP_WEB_LISTING',
          page: page
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const json = await response.json();
      console.log('Fetched more data:', json); // Debugging statement

      const newRestaurants = json?.data?.cards[1]?.card?.card?.gridElements?.infoWithStyle?.restaurants || [];

      if (newRestaurants.length === 0) {
        setHasMore(false); // No more items to load
      } else {
        setListOfRestaurant(prevRestaurants => [...prevRestaurants, ...newRestaurants]);
        setFilteredRestaurant(prevRestaurants => [...prevRestaurants, ...newRestaurants]);
      }
    } catch (error) {
      console.error('Error fetching more data:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    console.log("hhh")
    fetchInitialData();
  }, []);
  console.log("hh")

  useEffect(() => {
    if (page > 1) {
      console.log("jnvndfv")
      fetchMoreData();
    }
  }, [page]);

  console.log("hll")

  useEffect(() => {
    const handleScroll = () => {
      if (window.innerHeight + document.documentElement.scrollTop >= document.documentElement.offsetHeight - 5) {
        console.log("meow")
        console.log('Scrolled to bottom'); // Debugging statement
        setPage(prevPage => prevPage + 1);
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [loading, hasMore]);

  console.log("kk")

  return listOfRestaurant.length === 0 && !loading ? (
    <Shimmer />
  ) : (
    <div className="body">
      <div className="filter">
        <div className="search">
          <input
            type="text"
            className="search-box"
            value={searchText}
            onChange={(e) => setSearchText(e.target.value)}
          />
          <button
            onClick={() => {
              const filtered = listOfRestaurant.filter(res =>
                res.info.name.toLowerCase().includes(searchText.toLowerCase())
              );
              setFilteredRestaurant(filtered);
            }}
          >
            Search
          </button>
        </div>
        <button
          className="filter-btn"
          onClick={() => {
            const filteredList = listOfRestaurant.filter(res => res.info.avgRating > 4);
            setFilteredRestaurant(filteredList);
          }}
        >
          Top Rated Restaurants
        </button>
      </div>
      <div className="res-container">
        {filteredRestaurant.map(restaurant => (
          <RestaurantCard key={restaurant.info.id} resData={restaurant} />
        ))}
      </div>
      {loading && <p>Loading...</p>}
    </div>
  );
};

export default Body;
